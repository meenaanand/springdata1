package Definitions;

import org.mockito.Mock;
import org.mockito.InjectMocks;
import cucumber.api.PendingException;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.When;
import cucumber.api.java.en.Then;
import cucumber.api.junit.Cucumber;
import org.junit.runner.RunWith;
import com.kgfsl.springdata1.model.Student;
import com.kgfsl.springdata1.repository.StudentRepository;
import java.util.List;
import java.util.Arrays;
import com.kgfsl.springdata1.controller.StudentController;

import static org.mockito.Mockito.when;
//import static org.mockito.Mockito.verify;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)

public class Test {
  @InjectMocks
  private StudentController studentController;
  @Mock
  private StudentRepository studentRepository;

  public static List<Student> expectedStudents;

  List<Student> actualStudents;

  @Given("^the setup is made for finding all students$")
  public void the_setup_is_made_for_finding_all_students()  {
    Student student1 = new Student(1L, "KGiSL");
    Student student2 = new Student(1L, "KGfSL");
    
    expectedStudents = Arrays.asList(student1, student2);
    when(studentRepository.findAll()).thenReturn(expectedStudents); 
  }

  @When("^the test is started$")
  public void the_test_is_started()  {
   actualStudents = studentController.findStudents();
  }

  @Then("^all students details are retrieved$")
  public void all_students_details_are_retrieved()  {
    assertNotNull(actualStudents);
    assertEquals(2, actualStudents.size());
    assertEquals(expectedStudents, actualStudents);
  }

}